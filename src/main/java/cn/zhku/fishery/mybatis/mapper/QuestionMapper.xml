<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zhku.fishery.mybatis.mapper.QuestionMapper">
  <resultMap id="BaseResultMap" type="cn.zhku.fishery.mybatis.entity.Question">
    <id column="questionid" jdbcType="INTEGER" property="questionid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="theme" jdbcType="VARCHAR" property="theme" />
    <result column="dictionaryid" jdbcType="INTEGER" property="dictionaryid" />
    <result column="adminid" jdbcType="VARCHAR" property="adminid" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.zhku.fishery.mybatis.entity.QuestionWithBLOBs">
    <result column="details" jdbcType="LONGVARCHAR" property="details" />
    <result column="answer" jdbcType="LONGVARCHAR" property="answer" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    questionid, name, phone, theme, dictionaryid, adminid, flag, email
  </sql>
  <sql id="Blob_Column_List">
    details, answer
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.zhku.fishery.mybatis.entity.QuestionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.zhku.fishery.mybatis.entity.QuestionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from question
    where questionid = #{questionid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from question
    where questionid = #{questionid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zhku.fishery.mybatis.entity.QuestionExample">
    delete from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zhku.fishery.mybatis.entity.QuestionWithBLOBs">
    insert into question (questionid, name, phone, 
      theme, dictionaryid, adminid, 
      flag, email, details, 
      answer)
    values (#{questionid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{theme,jdbcType=VARCHAR}, #{dictionaryid,jdbcType=INTEGER}, #{adminid,jdbcType=VARCHAR}, 
      #{flag,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{details,jdbcType=LONGVARCHAR}, 
      #{answer,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.zhku.fishery.mybatis.entity.QuestionWithBLOBs">
    insert into question
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="questionid != null">
        questionid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="theme != null">
        theme,
      </if>
      <if test="dictionaryid != null">
        dictionaryid,
      </if>
      <if test="adminid != null">
        adminid,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="details != null">
        details,
      </if>
      <if test="answer != null">
        answer,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="questionid != null">
        #{questionid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="theme != null">
        #{theme,jdbcType=VARCHAR},
      </if>
      <if test="dictionaryid != null">
        #{dictionaryid,jdbcType=INTEGER},
      </if>
      <if test="adminid != null">
        #{adminid,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="details != null">
        #{details,jdbcType=LONGVARCHAR},
      </if>
      <if test="answer != null">
        #{answer,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zhku.fishery.mybatis.entity.QuestionExample" resultType="java.lang.Long">
    select count(*) from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update question
    <set>
      <if test="record.questionid != null">
        questionid = #{record.questionid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.theme != null">
        theme = #{record.theme,jdbcType=VARCHAR},
      </if>
      <if test="record.dictionaryid != null">
        dictionaryid = #{record.dictionaryid,jdbcType=INTEGER},
      </if>
      <if test="record.adminid != null">
        adminid = #{record.adminid,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.details != null">
        details = #{record.details,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.answer != null">
        answer = #{record.answer,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update question
    set questionid = #{record.questionid,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      theme = #{record.theme,jdbcType=VARCHAR},
      dictionaryid = #{record.dictionaryid,jdbcType=INTEGER},
      adminid = #{record.adminid,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR},
      details = #{record.details,jdbcType=LONGVARCHAR},
      answer = #{record.answer,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update question
    set questionid = #{record.questionid,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      theme = #{record.theme,jdbcType=VARCHAR},
      dictionaryid = #{record.dictionaryid,jdbcType=INTEGER},
      adminid = #{record.adminid,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zhku.fishery.mybatis.entity.QuestionWithBLOBs">
    update question
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="theme != null">
        theme = #{theme,jdbcType=VARCHAR},
      </if>
      <if test="dictionaryid != null">
        dictionaryid = #{dictionaryid,jdbcType=INTEGER},
      </if>
      <if test="adminid != null">
        adminid = #{adminid,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="details != null">
        details = #{details,jdbcType=LONGVARCHAR},
      </if>
      <if test="answer != null">
        answer = #{answer,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where questionid = #{questionid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.zhku.fishery.mybatis.entity.QuestionWithBLOBs">
    update question
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      theme = #{theme,jdbcType=VARCHAR},
      dictionaryid = #{dictionaryid,jdbcType=INTEGER},
      adminid = #{adminid,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      details = #{details,jdbcType=LONGVARCHAR},
      answer = #{answer,jdbcType=LONGVARCHAR}
    where questionid = #{questionid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zhku.fishery.mybatis.entity.Question">
    update question
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      theme = #{theme,jdbcType=VARCHAR},
      dictionaryid = #{dictionaryid,jdbcType=INTEGER},
      adminid = #{adminid,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR}
    where questionid = #{questionid,jdbcType=INTEGER}
  </update>
</mapper>